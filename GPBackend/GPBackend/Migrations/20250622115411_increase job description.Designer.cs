// <auto-generated />
using System;
using GPBackend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GPBackend.Migrations
{
    [DbContext(typeof(GPDBContext))]
    [Migration("20250622115411_increase job description")]
    partial class increasejobdescription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GPBackend.Models.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("application_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<int?>("AtsScore")
                        .HasColumnType("int")
                        .HasColumnName("ats_score");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("job_title");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("job_type");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("link");

                    b.Property<byte[]>("Rowversion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("rowversion");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stage");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateOnly>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("submission_date")
                        .HasDefaultValueSql("(CONVERT([date],getdate()))");

                    b.Property<int?>("SubmittedCvId")
                        .HasColumnType("int")
                        .HasColumnName("submitted_cv_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ApplicationId");

                    b.HasIndex("UserId", "CompanyId");

                    b.HasIndex(new[] { "SubmittedCvId" }, "IX_Applications_SubmittedCvId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("GPBackend.Models.ApplicationEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("application_id");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApplicationId" }, "IX_AppEmployee_App");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_AppEmployee_Emp");

                    b.HasIndex(new[] { "ApplicationId", "EmployeeId" }, "UQ_ApplicationEmployee_UniquePair")
                        .IsUnique();

                    b.ToTable("ApplicationEmployee", (string)null);
                });

            modelBuilder.Entity("GPBackend.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CareersLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("careers_link");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LinkedinLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("linkedin_link");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<byte[]>("Rowversion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("rowversion");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.HasKey("CompanyId");

                    b.HasIndex(new[] { "Name" }, "UQ_Companies_Name")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("GPBackend.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<string>("Contacted")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contacted");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("job_title");

                    b.Property<string>("LinkedinLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("linkedin_link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId", "CompanyId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("GPBackend.Models.Interview", b =>
                {
                    b.Property<int>("InterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("interview_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterviewId"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("application_id");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("feedback");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("position");

                    b.Property<DateTime>("StartDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("InterviewId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("GPBackend.Models.InterviewQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("answer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int")
                        .HasColumnName("interview_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.HasKey("QuestionId");

                    b.HasIndex("InterviewId");

                    b.ToTable("Interview_Questions", (string)null);
                });

            modelBuilder.Entity("GPBackend.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("answer");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Question1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.HasKey("QuestionId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("GPBackend.Models.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("refresh_token_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<DateTime>("ExpiryDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("expiry_date");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit")
                        .HasColumnName("is_revoked");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit")
                        .HasColumnName("is_used");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("replaced_by_token");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GPBackend.Models.Resume", b =>
                {
                    b.Property<int>("ResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("resume_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResumeId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<byte[]>("ResumeFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("resume_file");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ResumeId");

                    b.HasIndex("UserId");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("GPBackend.Models.ResumeTest", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<int>("AtsScore")
                        .HasColumnType("int")
                        .HasColumnName("ats_score");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("job_description");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int")
                        .HasColumnName("resume_id");

                    b.Property<DateTime>("TestDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("test_date")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.HasKey("TestId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeTests");
                });

            modelBuilder.Entity("GPBackend.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("skill_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<string>("Skill1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("skill");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    b.HasKey("SkillId");

                    b.HasIndex(new[] { "TestId", "Skill1" }, "UQ_Skills_TestSkill")
                        .IsUnique();

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("GPBackend.Models.TodoList", b =>
                {
                    b.Property<int>("TodoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("todo_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TodoId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("ApplicationLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("application_link");

                    b.Property<string>("ApplicationTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("application_title");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit")
                        .HasColumnName("completed");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("deadline");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("TodoId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("GPBackend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fname");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("role");

                    b.Property<byte[]>("Rowversion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("rowversion");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Email" }, "UQ_Users_Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GPBackend.Models.UserCompany", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("UserId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("User_Companies", (string)null);
                });

            modelBuilder.Entity("GPBackend.Models.Application", b =>
                {
                    b.HasOne("GPBackend.Models.Resume", "SubmittedCv")
                        .WithMany("Applications")
                        .HasForeignKey("SubmittedCvId")
                        .HasConstraintName("FK_Applications_Resumes");

                    b.HasOne("GPBackend.Models.UserCompany", "UserCompany")
                        .WithMany("Applications")
                        .HasForeignKey("UserId", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Applications_User_Companies");

                    b.Navigation("SubmittedCv");

                    b.Navigation("UserCompany");
                });

            modelBuilder.Entity("GPBackend.Models.ApplicationEmployee", b =>
                {
                    b.HasOne("GPBackend.Models.Application", "Application")
                        .WithMany("ApplicationEmployees")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationEmployee_Applications");

                    b.HasOne("GPBackend.Models.Employee", "Employee")
                        .WithMany("ApplicationEmployees")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_AppEmployee_Employees");

                    b.Navigation("Application");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("GPBackend.Models.Employee", b =>
                {
                    b.HasOne("GPBackend.Models.UserCompany", "UserCompany")
                        .WithMany("Employees")
                        .HasForeignKey("UserId", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Employees_User_Companies");

                    b.Navigation("UserCompany");
                });

            modelBuilder.Entity("GPBackend.Models.Interview", b =>
                {
                    b.HasOne("GPBackend.Models.Application", "Application")
                        .WithMany("Interviews")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK_Interviews_Applications");

                    b.HasOne("GPBackend.Models.Company", "Company")
                        .WithMany("Interviews")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Interviews_Companies");

                    b.HasOne("GPBackend.Models.User", "User")
                        .WithMany("Interviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Interviews_Users");

                    b.Navigation("Application");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GPBackend.Models.InterviewQuestion", b =>
                {
                    b.HasOne("GPBackend.Models.Interview", "Interview")
                        .WithMany("InterviewQuestions")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Interview_Questions_Interviews");

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("GPBackend.Models.Question", b =>
                {
                    b.HasOne("GPBackend.Models.Application", "Application")
                        .WithMany("Questions")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_Questions_Applications");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("GPBackend.Models.RefreshToken", b =>
                {
                    b.HasOne("GPBackend.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RefreshTokens_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GPBackend.Models.Resume", b =>
                {
                    b.HasOne("GPBackend.Models.User", "User")
                        .WithMany("Resumes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Resumes_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GPBackend.Models.ResumeTest", b =>
                {
                    b.HasOne("GPBackend.Models.Resume", "Resume")
                        .WithMany("ResumeTests")
                        .HasForeignKey("ResumeId")
                        .IsRequired()
                        .HasConstraintName("FK_ResumeTests_Resumes");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("GPBackend.Models.Skill", b =>
                {
                    b.HasOne("GPBackend.Models.ResumeTest", "Test")
                        .WithMany("Skills")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Skills_ResumeTests");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("GPBackend.Models.TodoList", b =>
                {
                    b.HasOne("GPBackend.Models.User", "User")
                        .WithMany("TodoLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TodoLists_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GPBackend.Models.UserCompany", b =>
                {
                    b.HasOne("GPBackend.Models.Company", "Company")
                        .WithMany("UserCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_Companies_Companies");

                    b.HasOne("GPBackend.Models.User", "User")
                        .WithMany("UserCompanies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_Companies_Users");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GPBackend.Models.Application", b =>
                {
                    b.Navigation("ApplicationEmployees");

                    b.Navigation("Interviews");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("GPBackend.Models.Company", b =>
                {
                    b.Navigation("Interviews");

                    b.Navigation("UserCompanies");
                });

            modelBuilder.Entity("GPBackend.Models.Employee", b =>
                {
                    b.Navigation("ApplicationEmployees");
                });

            modelBuilder.Entity("GPBackend.Models.Interview", b =>
                {
                    b.Navigation("InterviewQuestions");
                });

            modelBuilder.Entity("GPBackend.Models.Resume", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ResumeTests");
                });

            modelBuilder.Entity("GPBackend.Models.ResumeTest", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("GPBackend.Models.User", b =>
                {
                    b.Navigation("Interviews");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Resumes");

                    b.Navigation("TodoLists");

                    b.Navigation("UserCompanies");
                });

            modelBuilder.Entity("GPBackend.Models.UserCompany", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
